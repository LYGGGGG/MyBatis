<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.ParameterMapper">

    <!-- List<User> getAllUser();-->
    <select id="getAllUser" resultType="User">
        select * from t_user
    </select>

    <!-- 若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号-->
    <select id="getUserByUsername" resultType="User">
        <!-- select * from t_user where username = '${username}'-->
        select * from t_user where username = #{username}
    </select>

    <!-- 若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中
        以arg0,arg1…为键，以参数为值；
        以param1,param2…为键，以参数为值；
        因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。-->
    <select id="checkLogin" resultType="User">
        select * from t_user where username = #{param1} and password = #{param2}
    </select>

    <!-- User checkLoginByMap(Map<String,Object> map);
    传入的参数为map集合，通过${}和#{}访问map集合的键就可以获取相对应的值-->
    <select id="checkLoginByMap" resultType="User">
        select * from t_user where username = #{username} and password = #{password}
    </select>

    <!--   User checkLoginByParam(@Param("username") String username,@Param("password") String password);
    -->
    <select id="checkLoginByParam" resultType="User">
        select * from t_user where username = #{username} and password = #{password}
    </select>

    <!--    int insertUser(User user);
    若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值-->
    <insert id="insertUser">
        insert into t_user values(null,#{username},#{password},#{age},#{sex},#{email})
    </insert>
</mapper>
